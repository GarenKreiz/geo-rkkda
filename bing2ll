#!/bin/sh

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Bing maps quadkey string to lat/lon

SYNOPSIS
    `basename $PROGNAME` [options] quadkey ...

DESCRIPTION
    Bing maps quadkey string to lat/lon. Quadkey is a version of Quad Trees.

OPTIONS
    -e		Elliptical earth
    -D lvl	Debug level

EXAMPLE
    Convert http://coord.info/GC5K63B:

	$ bing2ll 0212113121222020033110
	0212113121222020033110 53.558640 -113.552070    n53.33.518 w113.33.124

	NOTE: there should be a 30 feet slop in the geochecker answer.  But
	it is an exact answer if you use GCtools for the iphone. For my
	program, this should be:

	$ bing2ll   0212113121222020033101333
	0212113121222020033101333 53.558618 -113.552118 n53.33.517 w113.33.127

SEE ALSO
    https://msdn.microsoft.com/en-us/library/bb259689.aspx
    http://intepid.com/posts/484

EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

bing2ll() {
    awk -v q=$1 -v ELLIP=$ELLIP -v DEBUG=$DEBUG '
    function abs(x)  { return (x>=0) ? x : -x }
    function asin(x) { return atan2(x,sqrt(1-x*x)) }
    function atan(x) { return atan2(x,1) } 
    function fmin(x,y ) { return x < y ? x : y } 
    function fmax(x,y ) { return x > y ? x : y } 
    function fabs(x) { return (x>=0) ? x : -x }
    function pow(a, b)      { return a ^ b }
    function NormalToMercator(y,	i) {
	R_MAJOR = 6378137.0
	R_MINOR = 6356752.3142
	RATIO = (R_MINOR/R_MAJOR)
	ECCENT = (sqrt(1.0 - (RATIO * RATIO)))
	if (ELLIP == 0)
	{
	    # Spherical Mercator
	    y = (2*atan(exp(y/EarthRadius)) - pi/2) / (pi/180)
	}
	else
	{
	    # Elliptical Mercator
	    ts = exp(-y / R_MAJOR)
	    phi = pi - 2 * atan(ts)
	    dphi = 1.0
	    for (i = 0; fabs(dphi) > 0.000000001 && i < 15; ++i)
	    {
		con =  ECCENT * sin (phi)
		dphi = pi/2 - 2*atan(ts*pow((1.0 - con) / (1.0 + con), COM)) \
		     - phi
		phi += dphi
	    }
	    y = phi * 57.29577951308232
	}
	return y
    }
    BEGIN {
	pi = 2 * asin(1)
	EarthRadius = 6378137
	offset = EarthRadius * pi / 2.0;
	sub(".*=", "", q)
	x = 0
	y = 0
	for (i = 1; i <= length(q); ++i)
	{
	    c = tolower(substr(q, i, 1))
	    if (0)
		{}
	    else if (c == "0")
		{ x -= offset; y += offset }
	    else if (c == "1")
		{ x += offset; y += offset }
	    else if (c == "2")
		{ x -= offset; y -= offset }
	    else if (c == "3")
		{ x += offset; y -= offset }
	    if (DEBUG)
	    {
		printf("%s gets you to (x,y): %.9lf, %.9lf\n",
		    substr(q, 1, i), x, y)
		lat = NormalToMercator(y)
		lon = x / (pi/180) / EarthRadius
		printf("\tlat/lon: %f %f", lat, lon)
		ilat = int(lat); ilon = int(lon)
		printf "\t%s%d.%06.3f %s%d.%06.3f", \
		    lat >= 0.0 ? "n" : "s", abs(ilat), abs(lat-ilat) * 60, \
		    lon >= 0.0 ? "e" : "w", abs(ilon), abs(lon-ilon) * 60
		printf "\n"
	    }
	    offset *= 0.5
	}
	lat = NormalToMercator(y)
	lon = x / (pi/180) / EarthRadius
	printf("%s %f %f", q, lat, lon)
	ilat = int(lat); ilon = int(lon)
	printf "\t%s%d.%06.3f %s%d.%06.3f", \
	    lat >= 0.0 ? "n" : "s", abs(ilat), abs(lat-ilat) * 60, \
	    lon >= 0.0 ? "e" : "w", abs(ilon), abs(lon-ilon) * 60
	printf "\n"
    }
    '
}

#
#       Process the options
#
DEBUG=0
ELLIP=0
while getopts "eD:h?" opt
do
	case $opt in
	e)	ELLIP="1";;
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

#
#	Main Program
#
if [ $# -lt 1 ]; then
    usage
fi

for i in $*; do
    bing2ll $i
done
