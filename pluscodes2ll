#!/bin/sh

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Google's plus codes to lat/lon

SYNOPSIS
    `basename $PROGNAME` [options] [pluscode] ...

DESCRIPTION
    Google's plus codes to lat/lon.

    You can use command line argument(s) or stdin.

OPTIONS
    -D lvl	Debug level

EXAMPLE
    Convert https://coord.info/GC8C76M :

	$ pluscodes2ll 9C2WP2CR+6F
	50.720562 -1.958813    n50.43.234 w01.57.529

SEE ALSO
    https://stedolan.github.io/jq/

    https://github.com/google/open-location-code/wiki/Plus-codes-API

    Map of plus codes. Enter 10 letter code, or 6 letter code plus the
    city and state:
    https://plus.codes
EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
#unset OPTIND
while getopts "D:h?" opt
do
	case $opt in
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

#
#	Main Program
#
doit (){
    code=`echo "$1" | sed 's/+/%2B/g' `
    #echo $code
    URL="https://plus.codes/api?address=$code"
    LAT=` curl -s "$URL" | jq ".plus_code.geometry.location.lat" `
    LON=` curl -s "$URL" | jq ".plus_code.geometry.location.lng" `
    awk -v "lat=$LAT" -v "lon=$LON" '
	function abs(x)         { return (x>=0) ? x : -x }
	BEGIN {
	    printf "%f %f", lat, lon
	    ilat = int(lat); ilon = int(lon)
	    printf "    %s%02d.%06.3f %s%02d.%06.3f", \
		lat >= 0.0 ? "n" : "s", abs(ilat), abs(lat-ilat) * 60, \
		lon >= 0.0 ? "e" : "w", abs(ilon), abs(lon-ilon) * 60
		printf "\n"
	}
    '
}

if ! which jq >/dev/null 2>&1; then
    error "You need to install 'jq' (dnf install jq)"
fi

case $# in
0)
    while read i; do
	doit $i
    done
    ;;
*)
    for i in $*; do
	doit $i
    done
    ;;
esac
