##############################################################################
# begin #include "geo-common-ok"
##############################################################################

#
#	Common global constants
#
UA="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
NAVI="http://www.navicache.com"

#
#	Global variables that can be overridden on command line or rc file
#
PASSWORD=dummy
USERNAME=dummy
LAT=44.9472
LON=-93.4914
CURL_OPTS=
OKMYSTERY=/dev/null

#
#	Global variables
#
COOKIE_FILE=$HOME/.geo/ok_cookies
NOCOOKIES=0
FOUND=1
USERFOUND=1
BABELFLAGS=
RADIUS=
OUTFILE=
OUTFMT=gpsdrive
NUM=20
INCLUDE=*
EXCLUDE='-unavail'
VARTIME=found
GEOSLEEP=${GEOSLEEP:-5}
SINCE=
CROSSLIST=0
OKBASE="https://www.opencaching.us"
OKCC=US
OKCC=

#
#	Common options handling
#
#
ok_usage() {
	cat <<EOF
Options:
	-c		Report (include) cross-listed caches.
	-f              Do not report any found or unavailable caches.
	-F		Report caches found by the login 'username' as unfound.
	-T datespec	Return caches placed or modified since 'datespec',
			which can be any date accepted by the date(1) command.
	-n num		Return "num" caches [$NUM]
	-s		Output short names for the caches (gpsbabel option)
	-I term		Include only caches with 'term' [$INCLUDE]
	-X term		Exclude caches with 'term' [$EXCLUDE].
			Terms: unfound, ifound, unavail,
			regular, multi, virtual, webcam, event, hybrid, moving
	-r radius	Display only caches with radius (e.g. -r 25M)
	-M mystery	Use file 'mystery' for unknown/mystery/puzzle
			caches [$OKMYSTERY]. Awk Format:
			    gcid lat lon comment
			i.e:
			    OU058C n44.45.123 w93.00.321       Final
			    OU058D 44.123456 -93.564123        Cache

	-o format	Output format, -o? for possibilities [$OUTFMT].
			Plus "gpsdrive.sql" for direct insertion into MySQL DB.
			Plus "map[,geo-map-opts]" to display a geo-map.
	-O filename	Output file, if not stdout
	-S              Alias for -o gpsdrive.sql
        -d              For -S, just delete selected records
        -P              For -S, purge all records of type -t $SQLTAG*
	-t type		For -ogpsdrive.sql, the waypoint type [$SQLTAG]
	-H htmldir	Also fetch the printable HTML pages (slowly)
	-L logdir	Also fetch the plain text log entries (slowly)
	-E var=val	Set environment "var" to "val"
			i.e. DATEFMT=0|1
	-D lvl		Debug level [$DEBUG]
	-U		Retrieve latest version of this script

Defaults can also be set with variables in file \$HOME/.georc:

	LAT=latitude;        LON=logitude;
	NUM=num;             OUTFMT=format;       BABELFLAGS=-s;
	SQLUSER=gast;        SQLPASS=gast;        SQLDB=geoinfo;
	OKBASE="$OKBASE";      OKCC=;
	OK_USERNAME=username OK_EMAIL=username@gmail.com
        OK_PASSWORD=password
EOF
	# -u username	Username for http://www.opencaching.us
	# -p password	Password for http://www.opencaching.us
	# PASSWORD=password;  USERNAME=username;
}

ok_getopts() {
    #
    # Defaults for options that cannot be overriden in the RC file
    #
    PURGE=0
    DELETE=0
    SQL=0
    MAP=0
    HTMLDIR=
    LOGDIR=

    while getopts "H:L:I:X:cdE:fFM:n:o:O:p:Pr:sSt:T:u:D:Uh?-" opt
    do
	case $opt in
	c)	CROSSLIST=1;;
	d)	DELETE=1;;
	E)	eval "$OPTARG";;
	f)	FOUND=0; EXCLUDE="$EXCLUDE|-ifound";;
        M)      OKMYSTERY="$OPTARG";;
	I)
		if [ "$INCLUDE" = "*" ]; then
		    INCLUDE=
		else
		    INCLUDE="$INCLUDE|"
		fi
		INCLUDE="$INCLUDE-$OPTARG"
		;;
	X)
		EXCLUDE="$EXCLUDE|-$OPTARG"
		;;
	F)	USERFOUND=0;;
	P)	PURGE=1;;
	n)	NUM="$OPTARG";;
	T)	SINCE="$OPTARG";;
	r)	RADIUS="$OPTARG"
		RADIUS_NUM=`awk -v "N=$RADIUS" 'BEGIN{printf "%d\n", N}'`
		case "$RADIUS" in
		*km*|*KM*)	RADIUS_UNITS=km;;
		*)		RADIUS_UNITS=mi;;
		esac
		;;
	s)	BABELFLAGS="$BABELFLAGS -s";;
	S)      OUTFMT="gpsdrive.sql";;
	t)	SQLTAG="$OPTARG";;
	u)	USERNAME="$OPTARG";;
	p)	PASSWORD="$OPTARG";;
	o)	OUTFMT="$OPTARG";;
	O)	OUTFILE="$OPTARG";;
	H)	HTMLDIR="$OPTARG";;
	L)	LOGDIR="$OPTARG";;
	D)	DEBUG="$OPTARG";;
	U)	echo "Getting latest version of this script..."
		curl $CURL_OPTS -o$UPDATE_FILE "$UPDATE_URL"
		chmod +x "$UPDATE_FILE"
		echo "Latest version is in $UPDATE_FILE"
		exit
		;;
	h|\?|-)	usage;;
	esac
    done
    
    shiftamt=`expr $OPTIND - 1`
    shift $shiftamt

    case "$OUTFMT" in
    map)
	OUTFMT=tiger,newmarker=grnpin,iconismarker
	MAP=1
	;;
    map,*)
	MAPOPTS=`echo "$OUTFMT" | sed -n 's/map,\(.*\)$/\1/p'`
	OUTFMT=tiger,newmarker=grnpin,iconismarker
	MAP=1
	;;

    gpsdrive.sql)
	OUTFMT=gpsdrive
	SQL=1
	# DEBUG=1
	;;
    \?)
	gpsbabel_formats
	exit
	;;
    esac

    LOGUSERNAME="$USERNAME"
    return $shiftamt
}

cat <<EOF > /dev/null
Consumer Key: rxSyU5DexRnNPMk94Ckd
Consumer Secret: Z4fcfqMyz6JPutddnHjKrwq59A533f7TacWftzDR
EOF

#
# ok_gpx2gpx - copy gpx to gpx
#
#	- Change <sym> to -multi, -unfound, etc.
#	- Delete placer and finder caches.
# 	- Delete cross listed caches.
# 	- Replace coords from OKMYSTERY file
# 	- Limit to $NUM entries
#
ok_gpx2gpx () {
    finder=$1
    placer=$2
    awk \
	-v "OKMYSTERY=$OKMYSTERY" \
	-v "PLACER=$placer" \
	-v "FINDER=$finder" \
	-v "NUM=$NUM" \
	-v "CROSSLIST=$CROSSLIST" \
	-v "DEBUG=$DEBUG" \
    '
    function debug(lvl, text) {
        if (lvl <= DEBUG)
            print text > "/dev/stderr"
    }
    function latlon ( val ) {
	if (val ~ ".[.]..*[.].*")
	{
	    if (val ~ "[-wWsS]")
	    {
		val = substr(val, 2)
		neg = 1
	    }
	    else if (val ~ "[nNeE]")
	    {
		val = substr(val, 2)
		neg = 0
	    }
	    else
		neg = 0
	    dd = int(val)
	    sub("[^.]*[.]", "", val)
	    dd += (val+0.0) / 60.0
	    return neg ? -dd : dd
	}
	return val
    }
    function reset () {
	found = 0
	type = "regular"
    }
    BEGIN {
	placer = ".*groundspeak:placed_by>" PLACER "<.*"
	finder = ".*groundspeak:finder.*>" FINDER "<.*"
	num = 0
	reset()

	while (getline <OKMYSTERY > 0)
	{
	    if ($0 ~ "^#")
		continue
	    if ($0 ~ "^[ 	]*$")
		continue
	    gc=$1
	    sub(".*/", "", gc)  # remove stuff like http://coord.info/
	    if ($2 ~ "unk")
	    {
		lat[gc] = 48
		lon[gc] = -88
	    }
	    else
	    {
		lat[gc] = $2
		lon[gc] = $3
	    }
	}
    }
    /<sym>/ {
	debug(5,  "sym:	" $0)
	next
    }
    /<name>/ {
	name = $0
	sub(".*<name>", "", name)
	sub("</name>.*", "", name)
	debug(5, "name: " name " ingpx" ingpx)
	if (CROSSLIST == 0)
	{
	    if (name ~ /^OX[1-9]/) ingpx = 2
	    if (name ~ /^OX[G-Y]/) ingpx = 2
	    if (name ~ /^OX.$/) ingpx = 1
	    if (name ~ /^OX..$/) ingpx = 1
	    if (name ~ /^OX...$/) ingpx = 1
	}
    }
    /<groundspeak:type>Found it/ { found = 1 }
    /<type>Found it<.type>/ { found = 1 }
    /<groundspeak:type>Found/ { found = 1 }

    /<groundspeak:type>Multi-cache/ { type = "multi"}
    /<groundspeak:type>Unknown Cache/ { type = "unknown" }
    /<groundspeak:type>Virtual/ { type = "virtual" }
    /<type>Geocache.Unknown Cache<.type>/ { type = "unknown" }
    /<type>Geocache.Multi-cache Cache<.type>/ { type = "multi" }
    /<type>Geocache.Virtual Cache<.type>/ { type = "virtual" }
    /<type>Geocache.Webcam Cache<.type>/ { type = "webcam" }

    /^$/ {next}
    ingpx == 0 {
	if ($0 ~ "<wpt ")
	{
	    reset()
	    ingpx = 1
	    n = 1
	    line[n++] = $0
	    next
	}
	print
    }
    ingpx == 1 {
	line[n++] = $0
	if ($1 ~ "</wpt>")
	{
	    if (lat[name] != 0)
	    {
		deglat = latlon( lat[name] )
		deglon = latlon( lon[name] )
		printf "    <wpt lon=\"%s\" lat=\"%s\">\n", deglon, deglat
	    }
	    else
		print line[1]

	    for (i = 2; i < n-1; ++i)
		print line[i]

	    sym = "Geocache"
	    if (found == 0) sym = sym "-unfound"
	    sym = sym "-" type
	    
	    printf "	<sym>%s</sym>\n", sym
	    print line[n-1]	# </wpt>
	    ingpx = 0
	    ++num
	    if (num >= NUM)
	    {
		print "</gpx>"
		exit
	    }
	    reset()
	}
    }
    $0 ~ placer && ingpx == 1 {
	ingpx = 2
    }
    $0 ~ finder && ingpx == 1 {
	ingpx = 2
    }
    ingpx == 2 {
	if ($1 ~ "</wpt>")
	    ingpx = 0
    }
    '
}

ok_login() {
    #
    # 06/11/2019: doesn't work for *.fr and *.ro, yet
    #
    _username=`urlencode "$1"`
    _password=`urlencode "$2"`

    [ "$_username" != dummy ] || error "You need a opencaching username"
    [ "$_password" != dummy ] || error "You need a opencaching password"

    LOGINPAGE=${TMP}-login.html
    CRUFT="$CRUFT $LOGINPAGE"

    #
    #   Now post the login
    #
    URL="$OKBASE"
    case "$OKBASE" in
    *.fr)	URL="$URL/login.php";;
    *)		URL="$URL/UserAuthorization/login";;
    esac
    #
    #	Use -k (insecure) on 12/25/20
    #
    # dbgcmd curl $CURL_OPTS -s -A "$UA" -b$COOKIE_FILE -c$COOKIE_FILE \
    dbgcmd curl $CURL_OPTS -k -s -A "$UA" -b$COOKIE_FILE -c$COOKIE_FILE \
        -e "$URL" \
        -demail="$_username" \
        -dpassword="$_password" \
        -dtarget="/" \
        -daction="login" \
        -dLogMeIn="Connexion" \
        -L "$URL" > $LOGINPAGE
    if [ ! -s $LOGINPAGE ]; then
        error "curl: returned /dev/null for '$LOGINPAGE'"
    fi
}

ok_query() {
    if [ $DEBUG -gt 0 ]; then
        TMP=/tmp/geo
    else
        TMP=/tmp/geo$$
    fi

    case "$OKBASE" in
    *.fr)	ok_login "$OK_EMAIL" "$OK_PASSWORD";;
    *.ro)	ok_login "$OK_EMAIL" "$OK_PASSWORD";;
    *.us)	ok_login "$OK_EMAIL" "$OK_PASSWORD";;
    *)		ok_login "$OK_USERNAME" "$OK_PASSWORD";;
    esac

    case "$OKBASE" in
    *.no)       OKBASE=http://www.opencaching.se;;
    esac

    OKURL="$OKBASE/search.php"
    # Broken GPXGC for de!  Sheesh!
    case "$OKBASE" in
    *.us)	OKURL="$OKURL?showresult=1&expert=0&output=GPXGC";;
    *)		OKURL="$OKURL?showresult=1&expert=0&output=GPX";;
    esac
    OKURL="$OKURL&f_inactive=1&f_ignored=1&f_userfound=1&f_userowner=1"
    OKURL="$OKURL&f_watched=0&f_geokret=0"
    OKURL="$OKURL&country=$OKCC"
    if [ "$REGION" = "" ]; then
	OKURL="$OKURL&region="
    fi

    # cachetype: stuff that's broken!
    case "$OKBASE" in
    *.de)	;;
    *.nl)	;;
    *.cz)	;;
    *.es)	;;
    *.se)	;;
    *.no)	;;
    *.it)	;;
    *.pl)	OKURL="$OKURL&cachetype=1111111111";;
    *.ro)	OKURL="$OKURL&cachetype=111111111";;
    *)		OKURL="$OKURL&cachetype=1111111111111";;
    esac

    # Prevent crosslisted caches!!!  Why there are 2 numbers I don't know!
    if [ $CROSSLIST = 0 ]; then
	case "$OKBASE" in
	*.us)	OKURL="$OKURL&cache_attribs=92&cache_attribs_not=";;
	*.pl)	OKURL="$OKURL&cache_attribs=&cache_attribs_not=";;
	*)	OKURL="$OKURL&cache_attribs=6&cache_attribs_not=";;
	esac
    else
	OKURL="$OKURL&cache_attribs=&cache_attribs_not="
	case "$OKBASE" in
	*.se)	OKURL="$OKURL&f_otherPlatforms=1";;
	esac
    fi

    OKURL="$OKURL&cachesize_1=1&cachesize_2=1&cachesize_3=1&cachesize_4=1"
    OKURL="$OKURL&cachesize_5=1&cachesize_6=1&cachesize_7=1&cachesize_8=1"
    OKURL="$OKURL&cachevote_1=-3&cachevote_2=3.000&cachenovote=1"
    OKURL="$OKURL&cachedifficulty_1=1&cachedifficulty_2=5"
    OKURL="$OKURL&cacheterrain_1=1&cacheterrain_2=5"
    if [ "$RADIUS" = "" ]; then
	OKURL="$OKURL&distance=500&unit=sm"
    else
	OKURL="$OKURL&distance=$RADIUS&unit=sm"
    fi

    if [ $DEBUG -gt 0 ]; then
	TMP=/tmp/geo
    else
	TMP=/tmp/geo$$
    fi

    OUTWAY=$TMP.way
    GPXFILE1=$TMP.1.gpx
    GPXFILE2=$TMP.2.gpx

    CRUFT="$CRUFT $OUTWAY"
    CRUFT="$CRUFT $GPXFILE1"
    CRUFT="$CRUFT $GPXFILE2"
    if [ $NOCOOKIES = 1 ]; then
        CRUFT="$CRUFT $COOKIE_FILE"
    fi

    if [ "$NUM" -lt 1 -o "$NUM" -gt 5000 ]; then
	error "limit must be 1-5000"
    fi

    #
    # increase "num" about ten times for found and crosslisted caches
    #
    if [ "$CROSSLIST" = 0 -o "$FOUND" = 0 ]; then
	((num=NUM*10))
	if [ "$num" -gt 5000 ]; then
	    num=5000
	fi
    else
	num=$NUM
    fi

    num=$NUM
    if [ "$num" -lt 20 ]; then
	num=20
    elif [ "$num" -gt 500 ]; then
	num=500
    fi
    OKURL="$OKURL&startat=0&count=$num&zip=1"

    if [ "$FOUND" = 0 ]; then
	: SEARCH="$SEARCH&found=false"
    fi

    if [ "$RADIUS" != "" ]; then
	south=`geo-project -l -- $LAT $LON $RADIUS 180`
	west=`geo-project -L -- $LAT $LON $RADIUS 270`
	north=`geo-project -l -- $LAT $LON $RADIUS 0`
	east=`geo-project -L -- $LAT $LON $RADIUS 90`
	SEARCH="$SEARCH&bbox=$south,$west,$north,$east"
    fi

    dbgcmd curl $CURL_OPTS -k -s -b $COOKIE_FILE -A "$UA" -L "$OKURL&$SEARCH" > $GPXFILE1
    # dbgcmd curl $CURL_OPTS -s -A "$UA" "http://www.opencaching.us/search.php?searchto=searchbydistance&showresult=1&expert=0&output=GPXGC&sort=bydistance&f_inactive=1&f_ignored=1&f_userfound=1&f_userowner=1&f_watched=0&f_geokret=0&country=US&cachetype=1111111111111&cache_attribs=&cache_attribs_not=&cachesize_1=1&cachesize_2=1&cachesize_3=1&cachesize_4=1&cachesize_5=1&cachesize_6=1&cachesize_7=1&cachevote_1=-3&cachevote_2=3.000&cachenovote=1&cachedifficulty_1=1&cachedifficulty_2=5&cacheterrain_1=1&cacheterrain_2=5&cacherating=0&latNS=N&lat_h=44&lat_min=56.850&lonEW=W&lon_h=93&lon_min=29.465&distance=500&unit=sm" > $GPXFILE1

    if [ $FOUND = 0 ]; then
	FINDER=$USERNAME
	PLACER=$USERNAME
    else
	FINDER="===NoFinder==="
	PLACER="===NoPlacer==="
    fi
    #
    #	Sometimes its in Zip format, sometimes NOT.  Go figure!
    #
    case `file $GPXFILE1` in
    *Zip*)	unzip -p $GPXFILE1 |
		    ok_gpx2gpx "$FINDER" "$PLACER" > $GPXFILE2;;
    *XML*)	ok_gpx2gpx "$FINDER" "$PLACER" < $GPXFILE1 > $GPXFILE2;;
    *)		error "Unknown format '`file $GPXFILE1`'";;
    esac

    #
    # Convert to the desired format
    #
    BABELFILT=
    if [ "$RADIUS" != "" ]; then
	BABELFILT="-x radius,distance=$RADIUS,lat=$LAT,lon=$LON"
    fi

    if [ $SQL = 1 ]; then
	    #
	    # add it via mysql
	    #
	    if [ "$OUTFILE" != "" ]; then
		>"$OUTFILE"
	    fi

	    if [ $PURGE = 1 ]; then
		gpsdrive_purge | gpsdrive_mysql
		PURGE=2
	    fi

	    dbgcmd gpsbabel $BABELFLAGS \
		-i gpx -f $GPXFILE2 \
		$BABELFILT -o "$OUTFMT" -F $OUTWAY
	    gpsdrive_add <$OUTWAY $SQLTAG | gpsdrive_mysql
    elif [ $MAP = 1 ]; then
	    dbgcmd gpsbabel $BABELFLAGS \
		-i gpx -f $GPXFILE2 \
		$BABELFILT -o "$OUTFMT" -F $OUTWAY
	    if [ "$OUTFILE" = "" ]; then
		dbgcmd geo-map -s0 $MAPOPTS -t$OUTWAY
	    else
		dbgcmd geo-map -s0 $MAPOPTS -t$OUTWAY -o"$OUTFILE"
	    fi
    else
	    #
	    # output to stdout or to a file
	    #
	    if [ "$OUTFILE" = "" ]; then
		OUTTMP="$TMP.way";  CRUFT="$CRUFT $OUTTMP"
		if [ "$RADIUS" != "" -o "$OUTFMT" != gpx ]; then
		    dbgcmd gpsbabel $BABELFLAGS \
			-i gpx -f $GPXFILE2 \
			$BABELFILT -o "$OUTFMT" -F $OUTTMP
		    cat $OUTTMP
		else
		    cat $GPXFILE2
		fi
	    else
		if [ "$RADIUS" != "" -o "$OUTFMT" != gpx ]; then
		    dbgcmd gpsbabel $BABELFLAGS \
			-i gpx -f $GPXFILE2 \
			$BABELFILT -o "$OUTFMT" -F $OUTFILE
		else
		    cp $GPXFILE2 $OUTFILE
		fi
	    fi
    fi
}

##############################################################################
# end #include "geo-common-ok"
##############################################################################
