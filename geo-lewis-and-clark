#!/bin/sh
#http://coord.info/GC11F2G
#LXBMPDN&ZZDBWY.ODLMIWIQS&BAJQTYU(A&FMAU)PNNYMSICNqv
#YGIQSUPHIQIDQBWYVTUMSWHCPYSQSEY&UDOQVUDRUATRINEUTNCtzOETN
#IXQUGHBSIMDCSNLJMS.HIUSWXMBAOWFstMSWqm.
# password: Pineapples ??? Not Artichokes.
# http://lewisandclarktrail.com/legacy/secretcode.htm

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Encode/decode Lewis and Clark cipher

SYNOPSIS
    `basename $PROGNAME` [options]

DESCRIPTION
    Encode/decode Lewis and Clark cipher, a.k.a. Jefferson Wheel cipher.

    The case is significant. Uppercase translates to a letter (A..Z),
    lowercase yields a number (0..9).

OPTIONS
    -d		Decode
    -e		Encode.
    -p passwd	Password. ($PASSWORD)
    -D lvl	Debug level

EXAMPLES
    Encode then decode:

	$ echo "Hi! How are you?" | geo-lewis-and-clark -e
	I&! AXZ IFP CGV?

	$ echo "I&! AXZ IFP CGV?" | geo-lewis-and-clark
	HI! HOW ARE YOU?

    Numbers and letters:

	$ echo jtz JQL pmi | geo-lewis-and-clark 
	926 AND 124

SEE ALSO
    http://lewisandclarktrail.com/legacy/secretcode.htm
EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
PASSWORD=Artichokes
ENCODE=0
while getopts "dep:D:h?" opt
do
	case $opt in
	d)	ENCODE=0;;
	e)	ENCODE=1;;
	p)	PASSWORD="$OPTARG";;
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

#
#	Main Program
#
awk -v PASSWORD=$PASSWORD -v ENCODE=$ENCODE '
function _ord_init(    low, high, i, t)
     {
         low = sprintf("%c", 7) # BEL is ascii 7
         if (low == "\a") {    # regular ascii
             low = 0
             high = 127
         } else if (sprintf("%c", 128 + 7) == "\a") {
             # ascii, mark parity
             low = 128
             high = 255
         } else {        # ebcdic(!)
             low = 0
             high = 255
         }
     
         for (i = low; i <= high; i++) {
             t = sprintf("%c", i)
             _ord_[t] = i
         }
     }
function ord(str,    c)
{
    # only first character is of interest
    c = substr(str, 1, 1)
    return _ord_[c]
}
function chr(c)
{
    # force c to be numeric by adding 0
    return sprintf("%c", c + 0)
}
BEGIN {
    verbose = 0
    PASSWORD=tolower(PASSWORD)
    if (length(PASSWORD) < 1)
    {
	printf "error: -p '' is 0 length!"
	exit
    }
    _ord_init()
    table["a"] = "BCDEFGHIJKLMNOPQRSTUVWXYZ&A"
    oc = "a"
    if (verbose) print oc, table[oc]
    for (i=1; i<26; ++i)
    {
	c = chr(i + 97)
	table[c] = substr(table[oc], 2)
	table[c] = table[c] substr(table[oc], 1, 1)
	if (verbose) print c, table[c]
	oc = c
    }
    pci = 0
}
{
    for (i=1; i<=length; ++i)
    {
	c = substr($0, i, 1)
	if (!ENCODE)
	    num = (c >= "a" && c <= "z") ? 1 : 0
	c = toupper(c)
	if (ENCODE && c >= "0" && c <= "9")
	{
	    num = 1
	    ic = index("1234567890", c)
	    c = chr(ic + 64)
	}
	if (!index("ABCDEFGHIJKLMNOPQRSTUVWXYZ&", c))
	{
	    printf "%s", c
	    continue
	}
	pc = substr(PASSWORD, pci+1, 1)
	#print pci, pc, table[pc]
	#print c
	if (ENCODE)
	{
	    ipc = index("ABCDEFGHIJKLMNOPQRSTUVWXYZ&", toupper(pc))
	    dc = substr(table[tolower(c)], ipc, 1)
	    # print c, pc, ipc, table[tolower(c)], dc
	    if (num) dc = tolower(dc)
	    printf "%s", dc
	}
	else
	{
	    dc = index(table[pc], c)
	    if (num)
		printf "%s", substr("1234567890", dc, 1)
	    else
		printf "%s", chr(dc+64)
	}
	pci = ++pci % length(PASSWORD)
    }
}
END {
    printf "\n"
}
'
