#!/bin/sh

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Spirit DVD Code to/from text

SYNOPSIS
    `basename $PROGNAME` [options]

DESCRIPTION
    Spirit DVD Code to or from text. Decoding uses '1', 'l', '|', or 'I' as
    aliases for '1'.

OPTIONS
    -e		Encode
    -D lvl	Debug level

EXAMPLES
    Decode:

	$ echo "11--1--111--11----11--11" | spiritdvd2text 
	NORTH

    Encode:

	$ echo NORTH | spiritdvd2text -e
	11--1--111--11----11--11
    
SEE ALSO
    http://www.planetary.org/explore/projects/redrover/mars-dvd-code-clues.html

    http://rumkin.com/tools/cipher/substitution.php
EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
ENC=0
while getopts "eD:h?" opt
do
	case $opt in
	e)	ENC=1;;
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

#
#	Main Program
#
awk -v ENC=$ENC '
BEGIN {
    let["---"] = " "
    let["--1"] = "E"
    let["-1-"] = "A"
    let["-11"] = "O"
    let["1--"] = "R"
    let["1-1---"] = "M"
    let["1-1--1"] = "W"
    let["1-1-1-"] = "F"
    let["1-1-11"] = "G"
    let["1-11--"] = "Y"
    let["1-11-1"] = "P"
    let["1-111-"] = "B"
    let["1-1111---"] = "V"
    let["1-1111--1"] = "K"
    let["1-1111-1-"] = "J"
    let["1-1111-11"] = "X"
    let["1-11111--"] = "Q"
    let["1-11111-1"] = "Z"
    let["11----"] = "T"
    let["11---1"] = "I"
    let["11--1-"] = "N"
    let["11--11"] = "H"
    let["11-1--"] = "D"
    let["11-1-1"] = "L"
    let["11-11-"] = "C"
    let["11-111"] = "U"
    let["111"] = "S"
    if (ENC)
	for (i in let)
	{
	    code[let[i]] = i
	}
}
ENC == 0 {
    text = $0
    gsub("[l]", "1", text)
    gsub("[|]", "1", text)
    gsub("[I]", "1", text)
    gsub("[^-1]", "", text)
    while (length(text) > 0)
    {
	#print "Text: ", text
	found = 0
	for (l in let) {
	    len = length(l)
	    tok = substr(text, 1, len)
	    # print len, tok, let[l]
	    if (tok == l)
	    {
		printf "%s", let[l]
		text = substr(text, len+1)
		found = 1
		break
	    }
	}
	if (!found)
	{
	    print "error!"
	    exit
	}
    }
    printf "\n"
}
ENC == 1 {
    text = toupper($0)
    for (i = 1; i <= length(text); ++i)
    {
	c = substr(text, i, 1)
	printf "%s", code[c]
    }
    printf "\n"
}
END {
}
'
