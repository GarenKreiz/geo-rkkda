#!/bin/sh
PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Excel to binary or QR code

SYNOPSIS
    `basename $PROGNAME` [options]

DESCRIPTION
    Excel to binary or QR code.

OPTIONS
    -D lvl	Debug level

EXAMPLE
    Convert to binary:

	$ geo-excel2qrcode
	X1, X7, A5, A6, A7, A10, A16, A19, A20, A21, A22, A23, A24, A25, Y3, Y4
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

    Convert to QR code:

	$ geo-excel2qrcode < GC5K7K9.txt | geo-text2qrcode -p bbb.png

EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
#unset OPTIND
while getopts "D:h?" opt
do
	case $opt in
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

one_word_per_line() {
    tr -cs "[:alnum:]" "\n"
}

#
#	Main Program
#
awk=awk
if [ `uname` = "Darwin" ]; then
    awk=gawk
    if ! which -s $awk; then
	error "'$awk' not found.  Install it from http://rudix.org/packages/gawk.html"
    fi
fi

one_word_per_line |
$awk -v DEBUG=$DEBUG '
function _ord_init(    low, high, i, t)
     {
         low = sprintf("%c", 7) # BEL is ascii 7
         if (low == "\a") {    # regular ascii
             low = 0
             high = 127
         } else if (sprintf("%c", 128 + 7) == "\a") {
             # ascii, mark parity
             low = 128
             high = 255
         } else {        # ebcdic(!)
             low = 0
             high = 255
         }
     
         for (i = low; i <= high; i++) {
             t = sprintf("%c", i)
             _ord_[t] = i
         }
     }
function ord(str,    c)
{
    # only first character is of interest
    c = substr(str, 1, 1)
    return _ord_[c]
}
function chr(c)
{
    # force c to be numeric by adding 0
    return sprintf("%c", c + 0)
}
BEGIN {
    _ord_init()
    ymax = 0; ymin = 999
    xmax = 0; xmin = 999
}
function cvt(l) {
    if (l >= "A" && l <= "Z" && length(l) == 2)
	o = ord(substr(l, 2, 1) ) - ord("A") + 27
    else if (l >= "A" && l <= "Z")
	o = ord(l) - ord("A") + 1
    else if (l >= "1" && l <= "9")
	o = l
    else
	return 0
    return o+0
}
/^$/ { next }
{
    let1 = $1; let2 = $1
    sub("[0-9][0-9]*", "", let1)
    sub("[A-Z][A-Z]*", "", let2)
    #let1 = substr($1, 1, 1)
    #let2 = substr($1, 2)
    # print let1, let2
    x = cvt(let1)
    if (xmax < x) xmax = x
    if (xmin > x) xmin = x
    y = cvt(let2)
    if (ymax < y) ymax = y
    if (ymin > y) ymin = y
    if (DEBUG)
	print let1, let2, y, x, xmax > "/dev/stderr"
    a[y][x] = 1
}
END {
    if (DEBUG)
	print "min/max", ymin, ymax, xmin, xmax > "/dev/stderr"
    for (y = ymin; y <= ymax; ++y)
    {
	for (x = xmin; x <= xmax; ++x)
	    printf "%s", a[y][x] ? "1 " : "0 "
	printf "\n"
    }
}
'
