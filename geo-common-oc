##############################################################################
# begin #include "geo-common-oc"
##############################################################################

#
#	Common global constants
#
UA="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)"
NAVI="http://www.navicache.com"

#
#	Global variables that can be overridden on command line or rc file
#
PASSWORD=dummy
USERNAME=dummy
LAT=44.9472
LON=-93.4914
CURL_OPTS=
OCMYSTERY=/dev/null

#
#	Global variables
#
FOUND=1
USERFOUND=1
BABELFLAGS=
RADIUS=
OUTFILE=
OUTFMT=gpsdrive
NUM=20
INCLUDE=*
EXCLUDE='-unavail'
VARTIME=found
GEOSLEEP=${GEOSLEEP:-5}
SINCE=
CROSSLIST=0

#
#	Common options handling
#
oc_usage() {
	cat <<EOF
Options:
	-c		Report (include) cross-listed caches.
	-f              Do not report any found or unavailable caches.
	-F		Report caches found by the login 'username' as unfound.
	-T datespec	Return caches placed or modified since 'datespec',
			which can be any date accepted by the date(1) command.
	-n num		Return "num" caches [$NUM]
	-s		Output short names for the caches (gpsbabel option)
	-I term		Include only caches with 'term' [$INCLUDE]
	-X term		Exclude caches with 'term' [$EXCLUDE].
			Terms: unfound, ifound, unavail,
			regular, multi, virtual, webcam, event, hybrid, moving
	-r radius	Display only caches with radius (e.g. -r 25M)
	-M mystery	Use file 'mystery' for unknown/mystery/puzzle
			caches [$OCMYSTERY]. Awk Format:
			    gcid lat lon comment
			i.e:
			    OCXCBVB n44.45.123 w93.00.321       Final
			    OCXCC1Z 44.123456 -93.564123	Cache

	-o format	Output format, -o? for possibilities [$OUTFMT].
			Plus "gpsdrive.sql" for direct insertion into MySQL DB.
			Plus "map[,geo-map-opts]" to display a geo-map.
	-O filename	Output file, if not stdout
	-S              Alias for -o gpsdrive.sql
        -d              For -S, just delete selected records
        -P              For -S, purge all records of type -t $SQLTAG*
	-t type		For -ogpsdrive.sql, the waypoint type [$SQLTAG]
	-H htmldir	Also fetch the printable HTML pages (slowly)
	-L logdir	Also fetch the plain text log entries (slowly)
	-D lvl		Debug level [$DEBUG]
	-U		Retrieve latest version of this script

Defaults can also be set with variables in file \$HOME/.georc:

	LAT=latitude;       LON=logitude;
	NUM=num;            OUTFMT=format;       BABELFLAGS=-s;
	SQLUSER=gast;       SQLPASS=gast;        SQLDB=geoinfo;
EOF
	# -u username	Username for http://www.opencaching.com
	# -p password	Password for http://www.opencaching.com
	# PASSWORD=password;  USERNAME=username;
}

oc_getopts() {
    #
    # Defaults for options that cannot be overriden in the RC file
    #
    PURGE=0
    DELETE=0
    SQL=0
    MAP=0
    HTMLDIR=
    LOGDIR=

    while getopts "H:L:I:X:cdfFM:n:o:O:p:Pr:sSt:T:u:D:Uh?-" opt
    do
	case $opt in
	c)	CROSSLIST=1;;
	d)	DELETE=1;;
	f)	FOUND=0; EXCLUDE="$EXCLUDE|-ifound";;
        M)      OCMYSTERY="$OPTARG";;
	I)
		if [ "$INCLUDE" = "*" ]; then
		    INCLUDE=
		else
		    INCLUDE="$INCLUDE|"
		fi
		INCLUDE="$INCLUDE-$OPTARG"
		;;
	X)
		EXCLUDE="$EXCLUDE|-$OPTARG"
		;;
	F)	USERFOUND=0;;
	P)	PURGE=1;;
	n)	NUM="$OPTARG";;
	T)	SINCE="$OPTARG";;
	r)	RADIUS="$OPTARG"
		RADIUS_NUM=`awk -v "N=$RADIUS" 'BEGIN{printf "%d\n", N}'`
		case "$RADIUS" in
		*km*|*KM*)	RADIUS_UNITS=km;;
		*)		RADIUS_UNITS=mi;;
		esac
		;;
	s)	BABELFLAGS="$BABELFLAGS -s";;
	S)      OUTFMT="gpsdrive.sql";;
	t)	SQLTAG="$OPTARG";;
	u)	USERNAME="$OPTARG";;
	p)	PASSWORD="$OPTARG";;
	o)	OUTFMT="$OPTARG";;
	O)	OUTFILE="$OPTARG";;
	H)	HTMLDIR="$OPTARG";;
	L)	LOGDIR="$OPTARG";;
	D)	DEBUG="$OPTARG";;
	U)	echo "Getting latest version of this script..."
		curl $CURL_OPTS -o$UPDATE_FILE "$UPDATE_URL"
		chmod +x "$UPDATE_FILE"
		echo "Latest version is in $UPDATE_FILE"
		exit
		;;
	h|\?|-)	usage;;
	esac
    done
    
    shiftamt=`expr $OPTIND - 1`
    shift $shiftamt

    case "$OUTFMT" in
    map)
	OUTFMT=tiger,newmarker=grnpin,iconismarker
	MAP=1
	;;
    map,*)
	MAPOPTS=`echo "$OUTFMT" | sed -n 's/map,\(.*\)$/\1/p'`
	OUTFMT=tiger,newmarker=grnpin,iconismarker
	MAP=1
	;;

    gpsdrive.sql)
	OUTFMT=gpsdrive
	SQL=1
	# DEBUG=1
	;;
    \?)
	gpsbabel_formats
	exit
	;;
    esac

    LOGUSERNAME="$USERNAME"
    return $shiftamt
}

cat <<EOF > /dev/null
There is no perfect solution to this problem. However, we will be
using a new mapping that will remove most conflicts. It will work like
this:

GC* -> OX*
OC* -> OXC*
O?* -> OX?*
TC -> OXDT*
GA -> OXDA*
?? -> OXZ and counting down.

GC codes will be converted just like before. OC codes will become
OXCsomething. O followed by a letter other than C will be mapped to
OXDsomething. TC and GA codes become OCDTsomething and OCDAsomething
respectfully. Again, not perfect, but better.

Returns a list of geocaches.

Either bbox, center, name, or hidden_by are required.

Results are sorted by distance from the center point. If not center
point is provided, then they are sorted by the distance from the
center of the bbox. If neither of those are provided, then they are
sorted by oxcode.

bbox=south,west,north,east
Returns a list of geocaches inside the specified bounding box sorted
by the distance from the center of the box.  The parameters south
latitude, west longitude, north latitude, east longitude define the
edges of a bounding box.  Coordinates should be in decimal degrees Use
positive numbers for north latitude and east longitude and negitive
numbers of south latitude and west longitude.  The box cannot cross
the 180° longitude line or the 90° or -90° points.

center=lat,lon
Returns a list of geocaches closest to the specified point side sorted
by the distance from that point.

exclude_bbox=south,west,north,east
Limits returned geocaches to those not inside the specified bouding
box.  The parameters south latitude, west longitude, north latitude,
east longitude define the edges of a bouding box.  Coordinates should
be in decimal degrees Use positive numbers for north latitude and east
longitude and negative numbers of south latitude and west longitude.
The box cannot cross the 180° longitude line or the 90° or -90°
points.

oxcode=oxcode1,oxcode2,...
Limits returned geocaches to those caches that have an oxcode that is
in the list.

name=name
Limits returned geocaches to those containing the string somewhere in
their title. The search string does not have to start at the beginning
of a word in the title.

difficulty=min_difficulty,max_difficulty
Limits returned geocache to those with a difficulty rating between
min_difficulty and max_difficulty inclusive.  Min and max difficulty
are decimal numbers that can range from 1 to 5

terrain=min_terrain,max_terrain
Limits returned geocache to those with a terrain rating between
min_terrain and max_terrain inclusive.  Min and max terrain are
decimal numbers that can range from 1 to 5

awesome=min_awesomeness,max_awesomeness
Limits returned geocache to those with a awesomeness rating between
min_awesomeness and max_awesomeness inclusive.  Min and max
awesomeness are decimal numbers that can range from 1 to 5

size=min_size,max_size
    Limits returned geocache to those with a size rating between min_size
    and max_size inclusive.  Min and max size are decimal numbers that can
    range from 1 to 5

found=true/false
    A user must be logged in for this parameter to have any affect.
    found = true:
	Only geocaches the user has already logged as found will be returned.
    found = false:
	Only geocaches the user has not already logged as found will be
	returned.
    found not specified:
	Both geocaches the user and marked as found and those not marked as
	found will be return.

type=type
    List of the types of geocaches to be returned. If no type parameter is
    specificed, all types are returned. Otherwise, only the listed types
    are returned.
	Traditional Cache
	Multi-cache
	Unknown Cache - aka Puzzle
	Virtual Cache

limit=limit
Sets the maximum number of geocaches that will be returned. Can be
between 0 and 5000. Defaults to 100 if no limit is specified.

hard_limit=true/false

hard_limit = true:
If more geocaches fit the criteria than what can be returned before
reaching the the limit, then an error (http error 413) is returned
instead of any geocaches.

hard_limit = false or not specified:
If more geocaches fit the criteria than what can be returned before
reaching the limit, then the closest geocaches to the center of the
query are returned.  description=true/false

description = true:
Cache descriptions are returned for all geocaches.

description = false:
Cache descriptions are not returned.

Defaults to false for JSON requests.

Defaults to true for GPX requests.

Avoid using description=true unless you really need the description
for every geocache. Getting the geocache descriptions can triple (or
more) the size of the returned data. When possible get a list of
geocaches without descriptions, and then get the descriptions for
individual geocaches as necessary.  hint=true/false

hint = true:
Cache hints are returned for all geocaches.

hint = false or hint:
Cache hints are not returned.

Defaults to false for JSON requests.

Defaults to true for GPX requests.

Avoid using hint=true unless you really need the hint for every
geocache. When possible get a list of geocaches without hints, and
then get the hints for individual geocaches as necessary.
tags=tag1,tag2...

Only geocaches that have these at least one of these tags will be
returned.  required_tags=tag1,tag2...

Only geocaches that have these at all of these tags will be returned.
exclude_tags=tag1,tag2...

Geocaches with any these tags will not be returned

If tags, required_tag, and exclude_tag are all used, only geocaches
with all of the required_tag, at least one of the tags, and none of
the exclude_tags will be returned.  log_limit=log_limit

The number of logs that will be returned with each geocache. Defaults
to 0.  log_comment=true/false

log_comment=true:
Log comments are returned for all logs.

log_comment=false:
Log comments are not returned.

Defaults to false for JSON requests.

Defaults to true for GPX requests.

Avoid using log_comment=true unless you really need the comment for
every log. Getting the log comment can triple (or more) the size of
the each log’s data. When possible request logs without descriptions
and then get the descriptions for individual logs as necessary.
hidden_by=user_id1,user_id2,user_id3,...

Return only geocaches that were hidden by the specified users.

order_by=published_dttm
Newest!

Authorization=5S86wxVR5v2XVGu6
EOF

#
# oc_gpx2gpx finder placer	- copy gpx to gpx
#
#	- Change <sym> to -multi, -unfound, etc.
#	- Delete placer and finder caches.
# 	- Delete cross listed caches.
# 	- Replace coords from OCMYSTERY file
# 	- Limit to $NUM entries
#
oc_gpx2gpx () {
    finder=$1
    placer=$2
    awk \
	-v "OCMYSTERY=$OCMYSTERY" \
	-v "PLACER=$placer" \
	-v "FINDER=$finder" \
	-v "NUM=$NUM" \
	-v "CROSSLIST=$CROSSLIST" \
	-v "DEBUG=$DEBUG" \
	-v "DISABLED=$DISABLED" \
    '
    function debug(lvl, text) {
        if (lvl <= DEBUG)
            print text > "/dev/stderr"
    }
    function latlon ( val ) {
	if (val ~ ".[.]..*[.].*")
	{
	    if (val ~ "[-wWsS]")
	    {
		val = substr(val, 2)
		neg = 1
	    }
	    else if (val ~ "[nNeE]")
	    {
		val = substr(val, 2)
		neg = 0
	    }
	    else
		neg = 0
	    dd = int(val)
	    sub("[^.]*[.]", "", val)
	    dd += (val+0.0) / 60.0
	    return neg ? -dd : dd
	}
	return val
    }
    function reset () {
	found = 0
	type = "regular"
    }
    BEGIN {
	placer = ".*groundspeak:placed_by>" PLACER "<.*"
	finder = ".*groundspeak:finder.*>" FINDER "<.*"
	num = 0
	reset()

	while (getline <OCMYSTERY > 0)
	{
	    if ($0 ~ "^#")
		continue
	    if ($0 ~ "^[ 	]*$")
		continue
	    gc=$1
	    sub(".*/", "", gc)  # remove stuff like http://coord.info/
	    if ($2 ~ "unk")
	    {
		lat[gc] = 48
		lon[gc] = -88
	    }
	    else
	    {
		lat[gc] = $2
		lon[gc] = $3
	    }
	}
    }
    /<sym>/ {
	debug(5,  "sym:	" $0)
	next
    }
    /<name>/ {
	name = $0
	sub(".*<name>", "", name)
	sub("</name>.*", "", name)
	debug(5, "name: " name)
	if (CROSSLIST == 0)
	{
	    if (name ~ /^OX[1-9]/) ingpx = 2
	    if (name ~ /^OX[G-Y]/) ingpx = 2
	    if (name ~ /^OX.$/) ingpx = 1
	    if (name ~ /^OX..$/) ingpx = 1
	    if (name ~ /^OX...$/) ingpx = 1
	}
    }
    DISABLED && /<groundspeak:cache id.*available=.False. / {
	ingpx = 2
    }
    /<groundspeak:type>Found it/ { found = 1 }
    /<groundspeak:type>Multi-cache/ { type = "multi"}
    /<groundspeak:type>Unknown Cache/ { type = "unknown" }
    /<groundspeak:type>Virtual/ { type = "virtual" }
    /^$/ {next}
    ingpx == 0 {
	if ($1 == "<wpt")
	{
	    reset()
	    ingpx = 1
	    n = 1
	    line[n++] = $0
	    next
	}
	print
    }
    ingpx == 1 {
	line[n++] = $0
	if ($1 == "</wpt>")
	{
	    if (lat[name] != 0)
	    {
		deglat = latlon( lat[name] )
		deglon = latlon( lon[name] )
		printf "    <wpt lon=\"%s\" lat=\"%s\">\n", deglon, deglat
	    }
	    else
		print line[1]

	    for (i = 2; i < n-1; ++i)
		print line[i]

	    sym = "Geocache"
	    if (found == 0) sym = sym "-unfound"
	    sym = sym "-" type
	    
	    printf "	<sym>%s</sym>\n", sym
	    print line[n-1]	# </wpt>
	    ingpx = 0
	    ++num
	    if (num >= NUM)
	    {
		print "</gpx>"
		exit
	    }
	    reset()
	}
    }
    $0 ~ placer && ingpx == 1 {
	ingpx = 2
    }
    $0 ~ finder && ingpx == 1 {
	ingpx = 2
    }
    ingpx == 2 {
	if ($1 == "</wpt>")
	    ingpx = 0
    }
    '
}

oc_query() {
    OCURL="http://www.opencaching.com/api/geocache.gpx?"

    if [ $DEBUG -gt 0 ]; then
	TMP=/tmp/geo
    else
	TMP=/tmp/geo$$
    fi

    OUTWAY=$TMP.way
    GPXFILE1=$TMP.1.gpx
    GPXFILE2=$TMP.2.gpx

    CRUFT="$CRUFT $OUTWAY"
    CRUFT="$CRUFT $GPXFILE1"
    CRUFT="$CRUFT $GPXFILE2"

    if [ "$NUM" -lt 1 -o "$NUM" -gt 5000 ]; then
	error "limit must be 1-5000"
    fi

    #
    # increase "num" about ten times for found and crosslisted caches
    #
    if [ "$CROSSLIST" = 0 -o "$FOUND" = 0 ]; then
	((num=NUM*10))
	if [ "$num" -gt 5000 ]; then
	    num=5000
	fi
    else
	num=$NUM
    fi
    SEARCH="$SEARCH&limit=$num"

    if [ "$FOUND" = 0 ]; then
	SEARCH="$SEARCH&found=false"
    fi

    if [ "$RADIUS" != "" ]; then
	south=`geo-project -l -- $LAT $LON $RADIUS 180`
	west=`geo-project -L -- $LAT $LON $RADIUS 270`
	north=`geo-project -l -- $LAT $LON $RADIUS 0`
	east=`geo-project -L -- $LAT $LON $RADIUS 90`
	SEARCH="$SEARCH&bbox=$south,$west,$north,$east"
    fi

    dbgcmd curl $CURL_OPTS -s -A "$UA" "$OCURL$SEARCH" > $GPXFILE1

    if [ $FOUND = 0 ]; then
	FINDER=$USERNAME
	PLACER=$USERNAME
    else
	FINDER=
	PLACER=
    fi
    oc_gpx2gpx "$FINDER" "$PLACER" < $GPXFILE1 > $GPXFILE2

    #
    # Convert to the desired format
    #
    BABELFILT=
    if [ "$RADIUS" != "" ]; then
	BABELFILT="-x radius,distance=$RADIUS,lat=$LAT,lon=$LON"
    fi

    if [ $SQL = 1 ]; then
	    #
	    # add it via mysql
	    #
	    if [ "$OUTFILE" != "" ]; then
		>"$OUTFILE"
	    fi

	    if [ $PURGE = 1 ]; then
		gpsdrive_purge | gpsdrive_mysql
		PURGE=2
	    fi

	    dbgcmd gpsbabel $BABELFLAGS \
		-i gpx -f $GPXFILE2 \
		$BABELFILT -o "$OUTFMT" -F $OUTWAY
	    gpsdrive_add <$OUTWAY $SQLTAG | gpsdrive_mysql
    elif [ $MAP = 1 ]; then
	    dbgcmd gpsbabel $BABELFLAGS \
		-i gpx -f $GPXFILE2 \
		$BABELFILT -o "$OUTFMT" -F $OUTWAY
	    if [ "$OUTFILE" = "" ]; then
		dbgcmd geo-map -s0 $MAPOPTS -t$OUTWAY
	    else
		dbgcmd geo-map -s0 $MAPOPTS -t$OUTWAY -o"$OUTFILE"
	    fi
    else
	    #
	    # output to stdout or to a file
	    #
	    if [ "$OUTFILE" = "" ]; then
		OUTTMP="$TMP.way";  CRUFT="$CRUFT $OUTTMP"
		if [ "$RADIUS" != "" -o "$OUTFMT" != gpx ]; then
		    dbgcmd gpsbabel $BABELFLAGS \
			-i gpx -f $GPXFILE2 \
			$BABELFILT -o "$OUTFMT" -F $OUTTMP
		    cat $OUTTMP
		else
		    cat $GPXFILE2
		fi
	    else
		if [ "$RADIUS" != "" -o "$OUTFMT" != gpx ]; then
		    dbgcmd gpsbabel $BABELFLAGS \
			-i gpx -f $GPXFILE2 \
			$BABELFILT -o "$OUTFMT" -F $OUTFILE
		else
		    cp $GPXFILE2 $OUTFILE
		fi
	    fi
    fi
}

##############################################################################
# end #include "geo-common-oc"
##############################################################################
