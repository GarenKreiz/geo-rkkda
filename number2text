#!/bin/bash

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Number to text

SYNOPSIS
    `basename $PROGNAME` [options] [number] ...

DESCRIPTION
    Number to text. Takes number(s) on the command line or from stdin.

OPTIONS
    -D lvl	Debug level

EXAMPLE
    Convert numbers:

	$ number2text 0 1 20 21 384 4876 49601
	zero
	one 
	twenty  
	twenty-one 
	three hundred eighty-four 
	four thousand eight hundred seventy-six 
	forty-nine thousand six hundred one 

SEE ALSO
    https://unix.stackexchange.com/questions/413441
EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
#unset OPTIND
while getopts "D:h?" opt
do
	case $opt in
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

#
#	Main Program
#
digits=(
    "" one two three four five six seven eight nine
    ten eleven twelve thirteen fourteen fifteen sixteen seventeen eightteen nineteen
)
tens=("" "" twenty thirty forty fifty sixty seventy eighty ninety)
units=("" thousand million billion trillion)

number2words() {
    local -i number=$((10#$1))
    local -i u=0
    local words=()
    local group

    if [ $number = 0 ]; then 
	echo zero
	return
    fi

    while ((number > 0)); do
        group=$(hundreds2words $((number % 1000)) )
        [[ -n "$group" ]] && group="$group ${units[u]}"

        words=("$group" "${words[@]}")

        ((u++))
        ((number = number / 1000))
    done
    echo "${words[*]}"
}

hundreds2words() {
    local -i num=$((10#$1))
    if ((num < 20)); then
        echo "${digits[num]}"
    elif ((num < 100)); then
	if (( (num % 10) == 0 )) ; then
	    echo "${tens[num / 10]} ${digits[num % 10]}"
	else
	    echo "${tens[num / 10]}-${digits[num % 10]}"
	fi
    else
        echo "${digits[num / 100]} hundred $("$FUNCNAME" $((num % 100)) )"
    fi
}

with_commas() {
    # sed -r ':a;s/^([0-9]+)([0-9]{3})/\1,\2/;ta' <<<"$1"
    # or, with just bash
    while [[ $1 =~ ^([0-9]+)([0-9]{3})(.*) ]]; do
        set -- "${BASH_REMATCH[1]},${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
    done
    echo "$1"
}

if [ $# = 0 ]; then
    while read arg; do
	[[ $arg == *[^0-9]* ]] && result="NaN" || result=$(number2words "$arg")
	#printf "%s\t%s\n" "$(with_commas "$arg")" "$result"
        printf "%s\n" "$result"
    done
else
    for arg; do
	[[ $arg == *[^0-9]* ]] && result="NaN" || result=$(number2words "$arg")
	#printf "%s\t%s\n" "$(with_commas "$arg")" "$result"
	printf "%s\n" "$result"
    done
fi
