#!/bin/sh
# http://coord.info/GC5D7QE

PROGNAME="$0"

usage() {
	cat <<EOF
NAME
    `basename $PROGNAME` - Atomic numbers to text

SYNOPSIS
    `basename $PROGNAME` [options] [weight] ...

DESCRIPTION
    Atomic numbers to text from stdin. If two or more numbers are separated
    by +-*/ then calculate the expression. Convert from stdin or command line.

OPTIONS
    -1		First character
    -2		Second character
    -D lvl	Debug level

EXAMPLE
    Convert http://coord.info/GC2HWNM:

	$ atomic-number-to-text -1
	14 63 99 19 22 72 49 50 96 79 55 67 63 47 52 28 76 45 65 80 87 76
	37 22 39 43 74 76 62 68 23 63 41 90 99 63 10 59 76 53 93 81 40 68
	88 76 76 93 99 76 28 68 74 63 38 52 34 68 23 63 41 65 70 76 11 63
	26 76 75 52 39 34 49 54 78 76 77 41 90 73 74 76 26 76 92 44 30 99
	37 76
	seekthiscacheatnorthfortytwoseventeenpointzerooneone \\
	westseventyonefortysixpointtwofourzero
    
EOF

	exit 1
}

#
#       Report an error and exit
#
error() {
	echo "`basename $PROGNAME`: $1" >&2
	exit 1
}

debug() {
	if [ $DEBUG -ge $1 ]; then
	    echo "`basename $PROGNAME`: $2" >&2
	fi
}

#
#       Process the options
#
DEBUG=0
ONE=0
while getopts "12D:h?" opt
do
	case $opt in
	1)	ONE=1;;
	2)	ONE=2;;
	D)	DEBUG="$OPTARG";;
	h|\?)	usage;;
	esac
done
shift `expr $OPTIND - 1`

one_word_per_line() {
    tr -cs "[:alnum:]/" "\n"
}

#
#	Main Program
#
if [ $# = 0 ]; then
    cmd=cat
else
    cmd="echo $*"
fi
$cmd |
one_word_per_line |
awk -v "ONE=$ONE" '
# calc3 - infix calculator - derived from calc3 in TAPL, chapter 6.
# by Kenny McCormack, Mon 3 Jan 2000
# modified by Alan Linton, $Date: 2016/11/03 22:52:09 $, $Revision: 1.4 $
# The rest is functions...
function eval(s  ,e) {
    _S_expr = s
    gsub(/[ \t]+/,"",_S_expr)
    if (length(_S_expr)==0) return 0
    _f = 1
    e = _expr()
    if (_f <= length(_S_expr))
        printf("An error occurred at %s\n", substr(_S_expr,_f))
    else return e
    }

function _expr(  var,e) {        # term | term [+-] term
    if (match(substr(_S_expr,_f),/^[A-Za-z_][A-Za-z0-9_]*=/)) {
        var = _advance()
        sub(/=$/,"",var)
        return _vars[var] = _expr()
        }
    e = _term()
    while (substr(_S_expr,_f,1) ~ /[+-]/)
        e = substr(_S_expr,_f++,1) == "+" ? e + _term() : e - _term()
    return e
    }

function _term(  e) {        # factor | factor [*/%] factor
    e = _factor()
    while (substr(_S_expr,_f,1) ~ /[*\/%]/) {
        _f++
        if (substr(_S_expr,_f-1,1) == "*") return e * _factor()
        if (substr(_S_expr,_f-1,1) == "/") return e / _factor()
        if (substr(_S_expr,_f-1,1) == "%") return e % _factor()
        }
        return e
    }

function _factor(  e) {      # factor2 | factor2^factor
    e = _factor2()
    if (substr(_S_expr,_f,1) != "^") return e
    _f++
    return e^_factor()
    }

function _factor2(  e) {     # [+-]?factor3 | !*factor2
    e = substr(_S_expr,_f)
    if (e~/^[\+\-\!]/) {  #unary operators [+-!]
        _f++
        if (e~/^\+/) return +_factor3()     # only one unary + allowed
        if (e~/^\-/) return -_factor3()     # only one unary - allowed
        if (e~/^\!/) return !(_factor2()+0) # unary ! may repeat
        }
    return _factor3()
    }

function _factor3(  e,fun,e2) { # number | varname | (expr) | function(...)
    e = substr(_S_expr,_f)

    #number
    if (match(e,/^([0-9]+[.]?[0-9]*|[.][0-9]+)([Ee][+-]?[0-9]+)?/)) {
        return _advance()
        }

    #function()
    if (match(e,/^([A-Za-z_][A-Za-z0-9_]+)?\(\)/)) {
        fun=_advance()
        if (fun~/^srand()/) return srand()
        if (fun~/^rand()/)  return rand()
        printf("error: unknown function %s\n", fun)
        return 0
        }

    #(expr) | function(expr) | function(expr,expr)
    if (match(e,/^([A-Za-z_][A-Za-z0-9_]+)?\(/)) {
        fun=_advance()
        if (fun~/^((cos)|(exp)|(int)|(log)|(sin)|(sqrt)|(srand))?\(/) {
            e=_expr()
            e=_calcfun(fun,e)
            }
            else if (fun~/^atan2\(/) {
                e=_expr()
            if (substr(_S_expr,_f,1) != ",") {
                printf("error: missing , at %s\n", substr(_S_expr,_f))
                return 0
                }
            _f++
            e2=_expr()
            e=atan2(e,e2)
            }
        else {
            printf("error: unknown function %s\n", fun)
            return 0
            }
        if (substr(_S_expr,_f++,1) != ")") {
            printf("error: missing ) at %s\n", substr(_S_expr,_f))
            return 0
            }
            return e
        }

    #variable name
    if (match(e,/^[A-Za-z_][A-Za-z0-9_]*/)) {
        return _vars[_advance()]
        }

    #error
    printf("error in factor: expected number or ( at %s\n", substr(_S_expr,_f))
    return 0
    }

function _calcfun(fun,e) {    #built-in functions of one variable
    if (fun=="(") return e
    if (fun=="cos(") return cos(e)
    if (fun=="exp(") return exp(e)
    if (fun=="int(") return int(e)
    if (fun=="log(") return log(e)
    if (fun=="sin(") return sin(e)
    if (fun=="sqrt(") return sqrt(e)
    if (fun=="srand(") return srand(e)
    }

function _advance(   tmp) {
    tmp = substr(_S_expr,_f,RLENGTH)
    _f += RLENGTH
    return tmp
    }
BEGIN {
    wt[1] = "H"
    wt[2] = "He"
    wt[3] = "Li"
    wt[4] = "Be"
    wt[5] = "B"
    wt[6] = "C"
    wt[7] = "N"
    wt[8] = "O"
    wt[9] = "F"
    wt[10] = "Ne"
    wt[11] = "Na"
    wt[12] = "Mg"
    wt[13] = "Al"
    wt[14] = "Si"
    wt[15] = "P"
    wt[16] = "S"
    wt[17] = "Cl"
    wt[18] = "Ar"
    wt[19] = "K"
    wt[20] = "Ca"
    wt[21] = "Sc"
    wt[22] = "Ti"
    wt[23] = "V"
    wt[24] = "Cr"
    wt[25] = "Mn"
    wt[26] = "Fe"
    wt[27] = "Co"
    wt[28] = "Ni"
    wt[29] = "Cu"
    wt[30] = "Zn"
    wt[31] = "Ga"
    wt[32] = "Ge"
    wt[33] = "As"
    wt[34] = "Se"
    wt[35] = "Br"
    wt[36] = "Kr"
    wt[37] = "Rb"
    wt[38] = "Sr"
    wt[39] = "Y"
    wt[40] = "Zr"
    wt[41] = "Nb"
    wt[42] = "Mo"
    wt[43] = "Tc"
    wt[44] = "Ru"
    wt[45] = "Rh"
    wt[46] = "Pd"
    wt[47] = "Ag"
    wt[48] = "Cd"
    wt[49] = "In"
    wt[50] = "Sn"
    wt[51] = "Sb"
    wt[52] = "Te"
    wt[53] = "I"
    wt[54] = "Xe"
    wt[55] = "Cs"
    wt[56] = "Ba"
    wt[57] = "La"
    wt[58] = "Ce"
    wt[59] = "Pr"
    wt[60] = "Nd"
    wt[61] = "Pm"
    wt[62] = "Sm"
    wt[63] = "Eu"
    wt[64] = "Gd"
    wt[65] = "Tb"
    wt[66] = "Dy"
    wt[67] = "Ho"
    wt[68] = "Er"
    wt[69] = "Tm"
    wt[70] = "Yb"
    wt[71] = "Lu"
    wt[72] = "Hf"
    wt[73] = "Ta"
    wt[74] = "W"
    wt[75] = "Re"
    wt[76] = "Os"
    wt[77] = "Ir"
    wt[78] = "Pt"
    wt[79] = "Au"
    wt[80] = "Hg"
    wt[81] = "Tl"
    wt[82] = "Pb"
    wt[83] = "Bi"
    wt[84] = "Po"
    wt[85] = "At"
    wt[86] = "Rn"
    wt[87] = "Fr"
    wt[88] = "Ra"
    wt[89] = "Ac"
    wt[90] = "Th"
    wt[91] = "Pa"
    wt[92] = "U"
    wt[93] = "Np"
    wt[94] = "Pu"
    wt[95] = "Am"
    wt[96] = "Cm"
    wt[97] = "Bk"
    wt[98] = "Cf"
    wt[99] = "Es"
    wt[100] = "Fm"
    wt[101] = "Md"
    wt[102] = "No"
    wt[103] = "Lr"
    wt[104] = "Rf"
    wt[105] = "Db"
    wt[106] = "Sg"
    wt[107] = "Bh"
    wt[108] = "Hs"
    wt[109] = "Mt"
    wt[110] = "Ds"
    wt[111] = "Rg"
    wt[112] = "Cn"
    wt[113] = "Uut"
    wt[113] = "Nh"
    wt[114] = "Fl"
    wt[115] = "Uup"
    wt[115] = "Mc"
    wt[116] = "Lv"
    wt[117] = "Uus"
    wt[117] = "Ts"
    wt[118] = "Uuo"
    wt[118] = "Og"
}
/[+-]/ {
    x = eval($0)
    if (x < 119)
	printf "%s", tolower( wt[x] )
    else
    {
	sub("[^+]*[+]", "")
	# print $0
	printf "%s", tolower( wt[eval($0)] )
    }
    if (1) next
}
/[1-9]*/ {
    if (ONE)
	printf "%s", tolower( substr(wt[$0], length(wt[$0]) >= 2 ? ONE : 1, 1) )
    else
	printf "%s", tolower( wt[$0] )
    if (1) next
}
{ print $0 }
END { printf "\n" }
'
